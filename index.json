{
  "index.html": {
    "href": "index.html",
    "title": "",
    "keywords": "About A toolset for deploying data to Azure Cosmos DB as part of a cloud-native application, designed for straightforward integration with CI/CD pipelines. The package format is based on the Common Data Model (CDM) and the Open Packaging Conventions (OPC) standards. Example Creating a package project: { \"databases\": [ { \"name\": \"adventureworks\", \"containers\": [ { \"name\": \"products\", \"operations\": [ { \"name\": \"upsert\", \"documents\": [ \"adventureworks/products/**/*.json\" ] } ] } ] } ] } Packing the database documents for deployment in Azure DevOps: cotopaxi pack $(Build.SourcesDirectory)/adventureworks.json $(Build.StagingDirectory)/adventureworks.cdbpkg Building package /home/vsts/work/1/a/adventureworks.cdbpkg for project /home/vsts/work/1/s/adventureworks.json Packing partition dfcf04cb-886e-ae82-9172-fa4a1acb5d8b for UPSERT in adventureworks\\products Packing document /home/vsts/work/1/s/adventureworks/products/bikes.json:$[0] Deploying the package to an Azure Cosmos DB account in Azure DevOps: cotopaxi deploy $(System.ArtifactsDirectory)/**/*.cdbpkg Deploying package /home/vsts/work/r1/a/adventureworks.cdbpkg to https://adventureworks.documents.azure.com:443 Acquiring configuration for container adventureworks\\products - HTTP 200 (2 RU) Deploying partition dfcf04cb-886e-ae82-9172-fa4a1acb5d8b for UPSERT in adventureworks\\products Executing UPSERT dfcf04cb-886e-ae82-9172-fa4a1acb5d8b:$[0] - HTTP 200 (10.29 RU) Specifications Microsoft - Common Data Model ECMA - Open Packaging Conventions"
  },
  "topics/cli-checkpoint.html": {
    "href": "topics/cli-checkpoint.html",
    "title": "cotopaxi checkpoint",
    "keywords": "cotopaxi checkpoint Name cotopaxi checkpoint - Creates a package that reverts operations from the source package or packages. Synopsis cotopaxi checkpoint <source-package> <revert-package> [--endpoint <endpoint> --key <key>|--connection-string <connection-string>] cotopaxi checkpoint -h|--help Description Deploy Operation Rollback Operation Condition delete N/A The document does not exist in the container delete upsert The document does exist in the container create delete The document does not exist in the container create N/A The document does exist in the container upsert delete The document does not exist in the container upsert upsert The document does exist in the container Arguments source-package The path to a package or packages for deployment deploy to the Azure Cosmos DB account (globbing patterns are supported). revert-package The path to a package that reverts operations from the source package or packages. Options --endpoint <endpoint> The address of the Azure Cosmos DB account. Can be specified with AZURE_COSMOS_ENDPOINT environment variable. Must be used with --key option or AZURE_COSMOS_KEY environment variable. --key <key> The account key or resource token for the Azure Cosmos DB account. Can be specified with AZURE_COSMOS_KEY environment variable. Must be used with --endpoint option. --connection-string <connection-string> The connection string for the Azure Cosmos DB account. Can be specified with AZURE_COSMOS_CONNECTION_STRING environment variable. -h|--help Prints out a description of how to use the command. Examples Create a rollback package with an Azure DevOps release using AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY environment variables: cotopaxi checkpoint $(System.ArtifactsDirectory)/**/*.cdbpkg $(System.ArtifactsDirectory)/example-$(Date:yyyyMMddHHmmss).crbpkg"
  },
  "topics/cli-deploy.html": {
    "href": "topics/cli-deploy.html",
    "title": "cotopaxi deploy",
    "keywords": "cotopaxi deploy Name cotopaxi deploy - Deploys the package or packages to the Azure Cosmos DB account. Synopsis cotopaxi deploy <package> [--endpoint <endpoint> --key <key>|--connection-string <connection-string>] [--dry-run] cotopaxi deploy -h|--help Description The command uses a connection to the Azure Cosmos DB account to get partition keys configuration for regular and \"dry run\" modes. Arguments package The path to a package or packages to deploy to the Azure Cosmos DB account (globbing patterns are supported). Options --endpoint <endpoint> The address of the Azure Cosmos DB account. Can be specified with AZURE_COSMOS_ENDPOINT environment variable. Must be used with --key option or AZURE_COSMOS_KEY environment variable. --key <key> The account key or resource token for the Azure Cosmos DB account. Can be specified with AZURE_COSMOS_KEY environment variable. Must be used with --endpoint option. --connection-string <connection-string> The connection string for the Azure Cosmos DB account. Can be specified with AZURE_COSMOS_CONNECTION_STRING environment variable. --dry-run Show which operations would be executed instead of actually executing them. -h|--help Prints out a description of how to use the command. Examples Deploying a package locally: cotopaxi deploy example.cdbpkg --endpoint https://example.documents.azure.com:443 --key $key$ Deploying a package locally using AZURE_COSMOS_KEY environment variable: cotopaxi deploy example.cdbpkg --endpoint https://example.documents.azure.com:443 Deploying packages with an Azure DevOps release using AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY environment variables: cotopaxi deploy $(System.ArtifactsDirectory)/**/*.cdbpkg Showing operations for deployment with an Azure DevOps release using AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY environment variables: cotopaxi deploy $(System.ArtifactsDirectory)/**/*.cdbpkg --dry-run"
  },
  "topics/cli-pack.html": {
    "href": "topics/cli-pack.html",
    "title": "cotopaxi pack",
    "keywords": "cotopaxi pack Name cotopaxi pack - Packs the documents into an Azure Cosmos DB package. Synopsis cotopaxi pack <project> <package> [--version <version>] cotopaxi pack -h|--help Description The package format supports the following deployment operations: create Creates a document with the identifier and partition key if the document does not exist. update Creates a document with the identifier and partition key if the document does not exist, or update if it exists. delete Deletes a document with the identifier and partition key if the document exists. A documents file must be a JSON array of objects, where each object has the $.id property. The project format supports relative globbing patterns in $.databases[*].containers[*].operations[*].documents[*]. Arguments project The path to the project that specifies documents to pack. package The path to the package to create. Options --version <version> Sets the package version information. -h|--help Prints out a description of how to use the command. Examples Packing documents locally: cotopaxi pack example.json example.cdbpkg Packing documents with an Azure DevOps pipeline: cotopaxi pack $(Build.SourcesDirectory)/example.json $(Build.StagingDirectory)/example.cdbpkg Packing documents with an Azure DevOps pipeline with commit ID as package version: cotopaxi pack $(Build.SourcesDirectory)/example.json $(Build.StagingDirectory)/example.cdbpkg --version $(Build.SourceVersion) The corresponding project file example.json: { \"databases\": [ { \"name\": \"adventureworks\", \"containers\": [ { \"name\": \"products\", \"operations\": [ { \"name\": \"upsert\", \"documents\": [ \"adventureworks/products/**/*.json\" ] } ] } ] } ] } The corresponding documents file adventureworks/products/bikes.json: [ { \"id\": \"3202cb6f-42af-4fe6-a3c5-d61927721e75\", \"category\": \"bikes\", \"name\": \"Mountain-100 Silver, 38\" } ] Schemas The project file schema { \"$schema\": \"https://json-schema.org/draft/2020-12\", \"$id\": \"https://alexanderkozlenko.github.io/cotopaxi/schemas/project.json\", \"type\": \"object\", \"properties\": { \"databases\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 256 }, \"containers\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 256 }, \"operations\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"enum\": [ \"create\", \"upsert\", \"delete\" ] }, \"documents\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } } }, \"required\": [ \"name\", \"documents\" ] } } }, \"required\": [ \"name\", \"operations\" ] } } }, \"required\": [ \"name\", \"containers\" ] } } }, \"required\": [ \"databases\" ] } The documents file schema { \"$schema\": \"https://json-schema.org/draft/2020-12\", \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 255 } }, \"required\": [ \"id\" ] } }"
  }
}